String str="hello world"

vowel -> a e i o u


to declare any array we use following syntax:

datatype[] arrayName= new dataType[size];

example:

int[] numbers= new int[5];

numbers[0]=13
numbers[1]=143
-
-
-
numbers[4];


to find the length of the array we use arrayName.length
numbers.length (it will give 5)

initialize the array:
=====================

char[] data= new char[10];
data[0]='c';

char[] data ={'a','b','c'};

int[] numbers={1,2,3,4,5,6 }; ---> sum of numbers in the array. 21

int[] numbers={11,2,31,14,156,68 }; find the max value in array


Types varaibles in java: 3
==========================
1. local
2. instance
3. static

1 local varaiable:
--> If we declare a varaible inside a method or constructor or a block then that varaibale is said to be local.
--> the scope of the local varaible is with in the method or constructor or block (scope- life= means we cant access outside of method or block or constructor)
--> we should intialize the local varaible otherwise we will get compile time error.
--> for local varaibles jvm will not provide default values.

2. instance variable:
---> if we declare a variable inside a class without static modifier then we can say it is a instance variable.
---> for every object a seperate copy of instance variables will be created.
---> the scope of instance varaible is object.( when object is created instance variables will be created and when object is destroyed instance varaibles also destroyed.)
--> for instance varaibles jvm provide default values.
--> to access instance variables we need to create object.

class Student{

	int rollNo;
	String name;

	Student(int no,String sname){
	rollNo=no;
	name=sname;
	}
}


Student s1= new Student(10,"meh"); rollNo=10, name=meh
Student s2= new Student(20,"sudheer"); rollNo=20, name=sudheer

Object class is the superclass for every class whether we extend or not.
whenever we print any object, it internally calls toString() method, if we dont override toString() method then it will call Object class
toString() method, //return this.getClass().getName() + "@" + Integer.toHexString(this.hashCode());

then it will print className@HexadecimalCode, example : Student@1ddfd456


3. static varaible:

--> if we declare a varaible inside a class with static modifier is called static varaible.
--> for static varaibles only one copy the varaible is created and that copy will be shared by all the object.
--> for static varaibales also jvm provides default values.
---> to access the static variable we can use class name or object name.
---> scope of the static varaible is , will be created at the time of loading the class into the jvm and will be destroyed when jvm is shutodown or unloading of the class from jvm.

Constructors:
Constructor is a special method whose task is to initialize the object.
Object contains data and behaviours. so to initialize the data in the object we use
Constructors.

Rules to create constructor:
1. class name and constructor name should be same.
2. constructor does not have any return type.
3. In a class we can define any no of constructors ( constructors overloading)
4. to invoke any constructor we use new operator.

Types of constructors
1. default constructor
2. parameterized constructor

When we dont create any constructor in the class , jvm will create a constructor.
If we create any constructor then jvm will not create any default constructor.

package: it is a collection related classes and interfaces.

Student.java  com.jntu.college
Student.java  com.vtu.college

Advantage with package is to resolve the conflicts.

to create any package we will use keyword package packagename;

package name always should start with com---> commercial

// com.companyname.projectname.modulename;
// com.walmart.retail.tax;
org---> open source














